import { useCallback, useEffect } from "react";
import { Typography, Alert, Button, message } from "antd";
import { useUserQuitPlan } from "~/hooks/useUserQuitPlan";
import TaskCard from "./TaskCard";
import ProgressCard from "~/components/common/ProgressCard";
import StatCard from "~/components/common/StatCard";
import {
  StageLoadingSkeleton,
  StageErrorCard,
  StageEmptyCard,
  ProgressOverview,
  RefreshButton,
  NextStageButton,
} from "~/components/common/QuitPlanComponents";

const { Title, Text, Paragraph } = Typography;

const UserStageView = () => {
  const {
    currentStage,
    myStages,
    stageTasks,
    loading,
    error,
    progress,
    completedCount,
    completeTask: completeTaskHook,
    moveToNextStage,
    refetch,
  } = useUserQuitPlan();

  // Fetch data l·∫ßn ƒë·∫ßu khi component mount
  useEffect(() => {
    refetch();
  }, [refetch]);

  const handleCompleteTask = useCallback(
    async (taskId) => {
      const result = await completeTaskHook(taskId);
      if (result.success) {
        if (result.allStagesCompleted) {
          message.success(result.message, 5);
        } else if (result.stageCompleted && result.hasNextStage) {
          message.success(
            "üéâ Ch√∫c m·ª´ng! B·∫°n ƒë√£ ho√†n th√†nh giai ƒëo·∫°n n√†y. Nh·∫•n n√∫t 'Chuy·ªÉn giai ƒëo·∫°n ti·∫øp theo' ƒë·ªÉ ti·∫øp t·ª•c!",
            6
          );
        } else {
          message.success("Ho√†n th√†nh nhi·ªám v·ª• th√†nh c√¥ng!");
        }
      } else {
        message.error(
          result.error || "Kh√¥ng th·ªÉ ho√†n th√†nh nhi·ªám v·ª•. Vui l√≤ng th·ª≠ l·∫°i."
        );
      }
    },
    [completeTaskHook]
  );

  const handleRefresh = useCallback(() => {
    message.loading("ƒêang t·∫£i l·∫°i d·ªØ li·ªáu...", 1);
    refetch();
  }, [refetch]);

  const handleMoveToNextStage = useCallback(async () => {
    const result = await moveToNextStage();
    if (result.success) {
      message.success(result.message, 3);
    } else {
      message.error(
        result.error || "Kh√¥ng th·ªÉ chuy·ªÉn giai ƒëo·∫°n. Vui l√≤ng th·ª≠ l·∫°i."
      );
    }
  }, [moveToNextStage]);

  if (loading)
    return <StageLoadingSkeleton text="ƒêang t·∫£i th√¥ng tin giai ƒëo·∫°n..." />;

  if (error)
    return <StageErrorCard message="L·ªói t·∫£i d·ªØ li·ªáu" description={error} />;

  // Ki·ªÉm tra n·∫øu quit plan ƒë√£ ho√†n th√†nh (t·∫•t c·∫£ stages ƒë√£ completed)
  const allStagesCompleted =
    myStages.length > 0 && myStages.every((stage) => stage.is_completed);

  if (!currentStage) {
    if (allStagesCompleted) {
      return (
        <div className="text-center py-12">
          <div className="mb-6">
            <div className="inline-flex items-center justify-center w-24 h-24 bg-gradient-to-r from-green-500 to-emerald-600 rounded-full mb-6 shadow-2xl">
              <span className="text-4xl text-white">üèÜ</span>
            </div>
          </div>
          <Title level={2} className="text-green-700 mb-4">
            Ch√∫c m·ª´ng! B·∫°n ƒë√£ ho√†n th√†nh k·∫ø ho·∫°ch cai thu·ªëc!
          </Title>
          <Text className="text-gray-600 text-lg mb-6">
            B·∫°n ƒë√£ ho√†n th√†nh t·∫•t c·∫£ {myStages.length} giai ƒëo·∫°n trong k·∫ø ho·∫°ch
            cai thu·ªëc. H√£y ti·∫øp t·ª•c duy tr√¨ l·ªëi s·ªëng kh·ªèe m·∫°nh!
          </Text>

          {/* T·ªïng quan c√°c giai ƒëo·∫°n ƒë√£ ho√†n th√†nh */}
          <ProgressOverview myStages={myStages} currentStage={null} />

          <div className="mt-8 p-6 bg-green-50 rounded-lg border border-green-200">
            <Text className="text-green-800 font-medium">
              üéâ K·∫ø ho·∫°ch cai thu·ªëc ƒë√£ ho√†n th√†nh th√†nh c√¥ng!
            </Text>
          </div>
        </div>
      );
    } else {
      return (
        <StageEmptyCard
          title="Ch∆∞a c√≥ giai ƒëo·∫°n n√†o ƒë∆∞·ª£c thi·∫øt l·∫≠p"
          desc="Hu·∫•n luy·ªán vi√™n s·∫Ω s·ªõm thi·∫øt l·∫≠p l·ªô tr√¨nh cai thu·ªëc."
        />
      );
    }
  }

  return (
    <div>
      {/* T·ªïng quan c√°c giai ƒëo·∫°n */}
      <ProgressOverview myStages={myStages} currentStage={currentStage} />

      <div className="mb-6">
        <div className="flex justify-between mb-4">
          <div className="flex-1">
            <Title
              level={3}
              className="mb-2 text-gray-800"
              ellipsis={{ rows: 2, tooltip: currentStage.title }}
            >
              {currentStage.title}
            </Title>
          </div>

          <div className="flex gap-2">
            <RefreshButton onRefresh={handleRefresh} loading={loading} />
            <NextStageButton
              onClick={
                progress === 100
                  ? handleMoveToNextStage
                  : () => {
                      message.warning(
                        `B·∫°n c√≤n ${
                          stageTasks.length - completedCount
                        } nhi·ªám v·ª• ch∆∞a ho√†n th√†nh. H√£y ho√†n th√†nh t·∫•t c·∫£ ƒë·ªÉ chuy·ªÉn giai ƒëo·∫°n ti·∫øp theo!`,
                        4
                      );
                    }
              }
              disabled={progress < 100}
              loading={loading}
              progress={progress}
            />
          </div>
        </div>

        {currentStage.description && (
          <div className="bg-gray-50 p-4 rounded-lg border mb-4">
            <Paragraph
              ellipsis={{ rows: 3, expandable: true, symbol: "Xem th√™m" }}
            >
              {currentStage.description}
            </Paragraph>
          </div>
        )}

        <div className="grid md:grid-cols-3 gap-4 mb-6">
          <StatCard
            label="Giai ƒëo·∫°n hi·ªán t·∫°i"
            value={`${currentStage.stage_number || 1}/${myStages.length}`}
            color="blue"
          />
          <ProgressCard
            percent={progress}
            completed={completedCount}
            total={stageTasks.length}
          />
          <StatCard
            label="Tr·∫°ng th√°i"
            value={progress === 100 ? "Ho√†n th√†nh" : "ƒêang th·ª±c hi·ªán"}
            color={progress === 100 ? "green" : "orange"}
          />
        </div>
      </div>

      <div>
        <Title level={4} className="mb-4 text-gray-800">
          Nhi·ªám v·ª• c·∫ßn ho√†n th√†nh
        </Title>

        {/* Th√¥ng b√°o khi ho√†n th√†nh 100% */}
        {progress === 100 && stageTasks.length > 0 && (
          <Alert
            message="üéâ Ch√∫c m·ª´ng! B·∫°n ƒë√£ ho√†n th√†nh t·∫•t c·∫£ nhi·ªám v·ª• trong giai ƒëo·∫°n n√†y!"
            description="B·∫°n c√≥ th·ªÉ chuy·ªÉn sang giai ƒëo·∫°n ti·∫øp theo b·∫±ng c√°ch nh·∫•n n√∫t ·ªü ph√≠a tr√™n."
            type="success"
            showIcon
            className="mb-4"
          />
        )}

        <div className="max-h-80 overflow-y-auto">
          {stageTasks.length ? (
            stageTasks.map((task, i) => (
              <TaskCard
                key={task._id}
                task={task}
                index={i}
                onComplete={handleCompleteTask}
              />
            ))
          ) : (
            <StageEmptyCard
              title="Ch∆∞a c√≥ nhi·ªám v·ª• n√†o"
              description="Hu·∫•n luy·ªán vi√™n s·∫Ω s·ªõm th√™m nhi·ªám v·ª• cho giai ƒëo·∫°n n√†y."
            />
          )}
        </div>
      </div>
    </div>
  );
};

export default UserStageView;
